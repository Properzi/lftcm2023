/-
Copyright (c) 2022 Heather Macbeth. All rights reserved.
Authors: Heather Macbeth, Marc Masdeu
-/
import LftCM.Common
import Mathlib.Data.Complex.Basic
import Mathlib.Data.Real.Basic
import Mathlib.Data.Subtype
import Mathlib.GroupTheory.GroupAction.Prod
import Mathlib.Data.Nat.Choose.Central
import Mathlib.Tactic.FieldSimp
import Mathlib.Tactic.Polyrith

set_option quotPrecheck false
noncomputable section

      linear_combination -(1 * hx) + x ^ 4 * h‚ÇÄ
    norm_num at this
  field_simp
  have h‚ÇÅ : x - 1 ‚â† 0 := by
    contrapose! hx'
    linear_combination hx'
  apply mul_left_cancel‚ÇÄ h‚ÇÅ
  linear_combination x * hx

noncomputable def œï : ‚Ñù ‚Üí ‚Ñù := fun x => (1 - x)‚Åª¬π

example {x : ‚Ñù} (h‚ÇÅ : x ‚â† 1) (h‚ÇÄ : x ‚â† 0) : œï (œï (œï x)) = x :=
  by
  dsimp [œï]
  have : 1 - x ‚â† 0 := by contrapose! h‚ÇÅ ; linear_combination -h‚ÇÅ
  have : -x ‚â† 0 := by contrapose! h‚ÇÄ ; linear_combination -h‚ÇÄ
  have : -x - (1 - x) ‚â† 0 := by intro h; linarith
  field_simp
  ring


-- introduce notation for the circle
local notation "ùïä" => {p : ‚Ñù √ó ‚Ñù | p.1 ^ 2 + p.2 ^ 2 = 1}

/-- Stereographic projection, forward direction. This is a map from `‚Ñù √ó ‚Ñù` to `‚Ñù`. It is smooth
away from the horizontal line `p.2 = 1`.  It restricts on the unit circle to the stereographic
projection. -/
def stereoToFun (p : ùïä) : ‚Ñù :=
  2 * p.1.1 / (1 - p.1.2)

@[simp]
theorem stereoToFun_apply (p : ùïä) : stereoToFun p = 2 * p.1.1 / (1 - p.1.2) := rfl

/-- Stereographic projection, reverse direction.  This is a map from `‚Ñù` to the unit circle `ùïä` in
`‚Ñù √ó ‚Ñù`. -/
def stereoInvFun (w : ‚Ñù) : ùïä :=
  ‚ü®(w ^ 2 + 4)‚Åª¬π ‚Ä¢ (4 * w, w ^ 2 - 4), by
    dsimp
    have : w ^ 2 + 4 ‚â† 0 := by nlinarith
    field_simp
    ring‚ü©

@[simp]
theorem stereoInvFun_apply (w : ‚Ñù) :
    (stereoInvFun w : ‚Ñù √ó ‚Ñù) = (w ^ 2 + 4)‚Åª¬π ‚Ä¢ (4 * w, w ^ 2 - 4) :=
  rfl


open Subtype

theorem stereoInvFun_ne_north_pole (w : ‚Ñù) : stereoInvFun w ‚â† (‚ü®(0, 1), by simp‚ü© : ùïä) := by
  dsimp
  rw [Subtype.ext_iff, Prod.mk.inj_iff]
  dsimp
  intro h
  have h‚ÇÅ : w ^ 2 + 4 ‚â† 0 := by nlinarith
  field_simp at h
  have : (8 : ‚Ñù) = 0 := by linear_combination -h.2
  norm_num at this

theorem stereo_left_inv {p : ùïä} (hp : (p : ‚Ñù √ó ‚Ñù) ‚â† (0, 1)) : stereoInvFun (stereoToFun p) = p := by
  ext1
  obtain ‚ü®‚ü®x, y‚ü©, pythag‚ü© := p
  dsimp at pythag hp ‚ä¢
  rw [Prod.mk.inj_iff] at hp ‚ä¢
  have ha : 1 - y ‚â† 0
  ¬∑ contrapose! hp with ha
    have : y = 1 := by linear_combination -ha
    refine' ‚ü®_, this‚ü©
    have : x ^ 2 = 0 := by linear_combination pythag - (y + 1) * this
    exact pow_eq_zero this
  constructor
  ¬∑ field_simp
    linear_combination 4 * (y - 1) * x * pythag
  ¬∑ field_simp
    linear_combination -4 * (y - 1) ^ 3 * pythag

theorem stereo_right_inv (w : ‚Ñù) : stereoToFun (stereoInvFun w) = w := by
  dsimp
  have : w ^ 2 + 4 ‚â† 0 := by nlinarith
  field_simp
  ring

example {i j : ‚Ñï} :
    ((i + 1).centralBinom : ‚Ñö) * j.centralBinom * (i - j + 1) / (2 * (i + j + 1) * (i + j + 2)) -
        i.centralBinom * (j + 1).centralBinom * (i - j - 1) / (2 * (i + j + 1) * (i + j + 2)) =
      i.centralBinom / (i + 1) * (j.centralBinom / (j + 1)) := by
  have h‚ÇÅ : ((i : ‚Ñö) + 1) * (i + 1).centralBinom = 2 * (2 * i + 1) * i.centralBinom
  ¬∑ exact_mod_cast i.succ_mul_centralBinom_succ
  -- BOTH:
  have h‚ÇÇ : ((j : ‚Ñö) + 1) * (j + 1).centralBinom = 2 * (2 * j + 1) * j.centralBinom
  ¬∑ exact_mod_cast j.succ_mul_centralBinom_succ
  -- BOTH:
  have : (i : ‚Ñö) + j + 1 ‚â† 0
  ¬∑ norm_cast
    exact (i+j).succ_ne_zero
  -- BOTH:
  have : (i : ‚Ñö) + j + 2 ‚â† 0
  ¬∑ norm_cast
    exact Nat.succ_ne_zero (i + j + 1)
  -- BOTH:
  have : (i : ‚Ñö) + 1 ‚â† 0
  ¬∑ norm_cast
    exact Nat.succ_ne_zero i
  -- BOTH:
  have : (j : ‚Ñö) + 1 ‚â† 0
  ¬∑ norm_cast
    exact Nat.succ_ne_zero j
  field_simp
  generalize ((Nat.centralBinom i) : ‚Ñö) = Bi at *
  generalize ((Nat.centralBinom j) : ‚Ñö) = Bj at *
  generalize ((Nat.centralBinom (i+1)) : ‚Ñö) = Bii at *
  generalize ((Nat.centralBinom (j+1)) : ‚Ñö) = Bjj at *
  generalize (i : ‚Ñö) = ii at *
  generalize (j : ‚Ñö) = jj at *
  linear_combination
    (-(1 * Bj * jj ^ 2) + 1 / 4 * ii * jj * Bjj + 1 / 2 * Bj * ii + Bj * jj + 1 / 4 * ii * Bjj - 1 / 4 * jj * Bjj +
            3 / 2 * Bj -
          1 / 4 * Bjj) *
        h‚ÇÅ +
      (-(1 / 4 * Bii * ii ^ 2) + ii * jj * Bi - 1 / 2 * ii * Bi + jj * Bi + 1 / 4 * Bii + 1 / 2 * Bi) * h‚ÇÇ
